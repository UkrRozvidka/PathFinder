// <auto-generated />
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250430101208_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Hike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxDistanceKm")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Hikes");
                });

            modelBuilder.Entity("DAL.Entities.HikeMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("HikeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HikeId");

                    b.HasIndex("UserId");

                    b.ToTable("HikeMembers");
                });

            modelBuilder.Entity("DAL.Entities.Point", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("HikrMemberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HikrMemberId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("DAL.Entities.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("GpxFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("HikeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HikeId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entities.Hike", b =>
                {
                    b.HasOne("DAL.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Infrasturcture.GeoPoint", "End", b1 =>
                        {
                            b1.Property<long>("HikeId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Lat")
                                .HasColumnType("float")
                                .HasColumnName("EndLat");

                            b1.Property<double>("Lon")
                                .HasColumnType("float")
                                .HasColumnName("EndLon");

                            b1.HasKey("HikeId");

                            b1.ToTable("Hikes");

                            b1.WithOwner()
                                .HasForeignKey("HikeId");
                        });

                    b.OwnsOne("Infrasturcture.GeoPoint", "Start", b1 =>
                        {
                            b1.Property<long>("HikeId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Lat")
                                .HasColumnType("float")
                                .HasColumnName("StartLat");

                            b1.Property<double>("Lon")
                                .HasColumnType("float")
                                .HasColumnName("StartLon");

                            b1.HasKey("HikeId");

                            b1.ToTable("Hikes");

                            b1.WithOwner()
                                .HasForeignKey("HikeId");
                        });

                    b.Navigation("Admin");

                    b.Navigation("End")
                        .IsRequired();

                    b.Navigation("Start")
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.HikeMember", b =>
                {
                    b.HasOne("DAL.Entities.Hike", "Hike")
                        .WithMany("HikeMembers")
                        .HasForeignKey("HikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Hikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Point", b =>
                {
                    b.HasOne("DAL.Entities.HikeMember", "HikeMember")
                        .WithMany("Points")
                        .HasForeignKey("HikrMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Infrasturcture.GeoPoint", "GeoPoint", b1 =>
                        {
                            b1.Property<long>("PointId")
                                .HasColumnType("bigint");

                            b1.Property<double>("Lat")
                                .HasColumnType("float")
                                .HasColumnName("Lat");

                            b1.Property<double>("Lon")
                                .HasColumnType("float")
                                .HasColumnName("Lon");

                            b1.HasKey("PointId");

                            b1.ToTable("Points");

                            b1.WithOwner()
                                .HasForeignKey("PointId");
                        });

                    b.Navigation("GeoPoint")
                        .IsRequired();

                    b.Navigation("HikeMember");
                });

            modelBuilder.Entity("DAL.Entities.Track", b =>
                {
                    b.HasOne("DAL.Entities.Hike", "Hike")
                        .WithMany("Tracks")
                        .HasForeignKey("HikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hike");
                });

            modelBuilder.Entity("DAL.Entities.Hike", b =>
                {
                    b.Navigation("HikeMembers");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("DAL.Entities.HikeMember", b =>
                {
                    b.Navigation("Points");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Hikes");
                });
#pragma warning restore 612, 618
        }
    }
}
